{
  // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "consoleAssert": {
    "prefix": "cas",
    "body": "console.assert(${1:expression}, ${2:object});",
    "description": "If the specified expression is false, the message is written to the console along with a stack trace"
  },
  "consoleClear": {
    "prefix": "ccl",
    "body": "console.clear();",
    "description": "Clears the console"
  },
  "consoleCount": {
    "prefix": "cco",
    "body": "console.count(${1:label});",
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
  },
  "consoleDebug": {
    "prefix": "cdb",
    "body": "console.debug(${1:object});",
    "description": "Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari"
  },
  "consoleDir": {
    "prefix": "cdi",
    "body": "console.dir(${1:object});",
    "description": "Prints a JavaScript representation of the specified object"
  },
  "consoleError": {
    "prefix": "cer",
    "body": "console.error(${1:object});",
    "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  },
  "consoleGroup": {
    "prefix": "cgr",
    "body": "console.group('${0:label}');",
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
  },
  "consoleGroupEnd": {
    "prefix": "cge",
    "body": "console.groupEnd();",
    "description": "Closes out the corresponding console.group()."
  },
  "consoleLog": {
    "prefix": "clg",
    "body": "console.log(${0:object});",
    "description": "Displays a message in the console"
  },
  "consoleLogObject": {
    "prefix": "clo",
    "body": "console.log('${1:object} :>> ', ${1:object});",
    "description": "Displays an object in the console with its name"
  },
  "consoleTrace": {
    "prefix": "ctr",
    "body": "console.trace(${0:object});",
    "description": "Prints a stack trace from the point where the method was called"
  },
  "consoleWarn": {
    "prefix": "cwa",
    "body": "console.warn(${0:object});",
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  },
  "consoleInfo": {
    "prefix": "cin",
    "body": "console.info(${0:object});",
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  },
  "consoleTable": {
    "prefix": "clt",
    "body": "console.table(${0:object});",
    "description": "Displays tabular data as a table."
  },
  "consoleTime": {
    "prefix": "cti",
    "body": "console.time(${0:object});",
    "description": "Sets starting point for execution time measurement"
  },
  "consoleTimeEnd": {
    "prefix": "cte",
    "body": "console.timeEnd(${0:object});",
    "description": "Sets end point for execution time measurement"
  },

  //   various methods
  "forEach": {
    "prefix": "fre",
    "body": "${1:array}.forEach(${2:currentItem} => {\n\t${0: //block}\n});",
    "description": "Creates a forEach statement in ES6 syntax"
  },
  "forOf": {
    "prefix": "fof",
    "body": "for (const ${1:item} of ${2:object}) {\n\t${0: //block}\n}",
    "description": "Iterating over property names of iterable objects"
  },
  "forIn": {
    "prefix": "fin",
    "body": "for (const ${1:item} in ${2:object}) {\n\t${0: //block}\n}",
    "description": "Iterating over property values of iterable objects"
  },
  "anonymousFunction": {
    "prefix": "anfn",
    "body": "(${1:params}) => {\n\t${2}\n}",
    "description": "Creates an anonymous function in ES6 syntax"
  },
  "namedFunction": {
    "prefix": "nfn",
    "body": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
    "description": "Creates a named function in ES6 syntax"
  },
  "destructingObject": {
    "prefix": "dob",
    "body": "const {${2:propertyName}} = ${1:objectToDestruct};",
    "description": "Creates and assigns a local variable using object destructing"
  },
  "destructingArray": {
    "prefix": "dar",
    "body": "const [${2:propertyName}] = ${1:arrayToDestruct};",
    "description": "Creates and assigns a local variable using array destructing"
  },
  "setInterval": {
    "prefix": "sti",
    "body": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms});",
    "description": "Executes the given function at specified intervals in ES6 syntax"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms});",
    "description": "Executes the given function after the specified delay in ES6 syntax"
  },
  "promise": {
    "prefix": "prom",
    "body": "return new Promise((resolve, reject) => {\n\t${1}\n});",
    "description": "Creates and returns a new Promise in the standard ES6 syntax"
  },
  "thenCatch": {
    "prefix": "thenc",
    "body": ".then((${1:result}) => {\n\t${2}\n}).catch((${3:err}) => {\n\t${4}\n});",
    "description": "Add the .then and .catch methods to handle promises"
  },

  // class helpers
  "constructor": {
    "prefix": "con",
    "body": "constructor(${1:params}) {\n\t${0}\n}",
    "description": "Add default constructor in a class in ES6 syntax"
  },
  "method": {
    "prefix": "met",
    "body": "${1:methodName}(${2:params}) {\n\t${0}\n}",
    "description": "Creates a method inside a class in ES6 syntax"
  },
  "propertyGet": {
    "prefix": "pge",
    "body": "get ${1:propertyName}() {\n\treturn this.${0};\n}",
    "description": "Creates a getter property inside a class in ES6 syntax"
  },
  "propertyset": {
    "prefix": "pse",
    "body": "set ${1:propertyName}(${2:value}) {\n\t${0};\n}",
    "description": "Creates a setter property inside a class in ES6 syntax"
  },
  // import export
  "import": {
    "prefix": "imp",
    "body": "import ${0:moduleName} from '${1:module}';",
    "description": "Imports entire module statement in ES6 syntax"
  },
  "importNoModuleName": {
    "prefix": "imn",
    "body": "import '${1:module}';$0",
    "description": "Imports entire module in ES6 syntax without module name"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}';$0",
    "description": "Imports only a portion of the module in ES6 syntax"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}';$0",
    "description": "Imports everything as alias from the module in ES6 syntax"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}';$0",
    "description": "Imports a specific portion of the module by assigning a local alias in ES6 syntax"
  },
  "require": {
    "prefix": "rqr",
    "body": "require('${1:package}');",
    "description": "Require a package"
  },
  "requireToConst": {
    "prefix": "req",
    "body": "const ${1:packageName} = require('${1:package}');$0",
    "description": "Require a package to const"
  },
  "moduleExports": {
    "prefix": "mde",
    "body": "module.exports = {\n\t$0\n};\n",
    "description": "Module exports from Common JS, node syntax at ES6"
  },
  "exportNamedVariable": {
    "prefix": "env",
    "body": "export const ${1:exportVariable} = ${2:localVariable};\n",
    "description": "Export named variable in ES6 syntax"
  },
  "exportNamedFunction": {
    "prefix": "enf",
    "body": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n};\n",
    "description": "Export named function in ES6 syntax"
  },
  "exportDefaultFunction": {
    "prefix": "edf",
    "body": "export default function ${1:${TM_FILENAME_BASE}}(${2:params}) {\n\t$0\n};\n",
    "description": "Export default function in ES6 syntax"
  },
  "exportClass": {
    "prefix": "ecl",
    "body": "export default class ${1:className} {\n\t$0\n};\n",
    "description": "Export default class in ES6 syntax"
  },
  "exportClassExtends": {
    "prefix": "ece",
    "body": "export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n};\n",
    "description": "Export default class which extends a base one in ES6 syntax"
  },

  // Javascript Snippet Pack
  "function": {
    "prefix": "func",
    "body": "function ${1:name}(${2:arguments}) {\n\t${0://block}\n}",
    "description": "Code snippet for function"
  },
  "prompt": {
    "prefix": "prm",
    "body": "prompt('${0:msg}');",
    "description": "Code snippet for 'prompt'"
  },
  "confirm": {
    "prefix": "cnf",
    "body": "confirm('${0:msg}');",
    "description": "Code snippet for Confirm"
  },
  "alert": {
    "prefix": "al",
    "body": "alert('${0:msg}');",
    "description": "Code snippet for 'alert'"
  },
  "JSON.stringify": {
    "prefix": "jss",
    "body": "JSON.stringify(${1:object});",
    "description": "Code snippet for 'JSON.stringify'"
  },
  "JSON.parse": {
    "prefix": "jsp",
    "body": "JSON.parse(${0:object});",
    "description": "Code snippet for 'JSON.parse'"
  },
  "querySelectorAll": {
    "prefix": "qsa",
    "body": "${1:document}.querySelectorAll('${0:selector}');",
    "description": "Code snippet for querySelectorAll"
  },
  "querySelector": {
    "prefix": "qs",
    "body": "${1:document}.querySelector('${0:selector}');",
    "description": "Code snippet for \"querySelector\""
  },
  "innerHTML": {
    "prefix": "inh",
    "body": "${1:document}.innerHTML = '${0:element}';",
    "description": "Code snippet for \"innerHTML\""
  },
  "textContent": {
    "prefix": "txc",
    "body": "${1:document}.textContent = '${0:content}';",
    "description": "Code snippet for \"textContent\""
  },
  "setAttribute": {
    "prefix": "sa",
    "body": "${1:document}.setAttribute('${2:attr}', ${3:value});",
    "description": "Code snippet for \"setAttribute\""
  },
  "removeAttribute": {
    "prefix": "ra",
    "body": "${1:document}.removeAttribute('${2:attr}');",
    "description": "Code snippet for \"removeAttribute\""
  },
  "getElementById": {
    "prefix": "gti",
    "body": "${1:document}.getElementById('${2:id}');",
    "description": "Code snippet for \"getElementById\""
  },
  "getElementsByClassName": {
    "prefix": "gtc",
    "body": "${1:document}.getElementsByClassName('${2:class}');",
    "description": "Code snippet for \"getElementsByClassName\""
  },
  "getElementsByTagName": {
    "prefix": "gtt",
    "body": "${1:document}.getElementsByTagName('${2:tag}');",
    "description": "Code snippet for \"getElementsByTagName\""
  },
  "getAttribute": {
    "prefix": "gta",
    "body": "${1:document}.getAttribute('${2:attr}');",
    "description": "Code snippet for \"getAttribute\""
  },
  "classList.add": {
    "prefix": "cla",
    "body": "${1:document}.classList.add('${2:class}');",
    "description": "Code snippet for \"classList.add\""
  },
  "classList.toggle": {
    "prefix": "clt",
    "body": "${1:document}.classList.toggle('${2:class}');",
    "description": "Code snippet for \"classList.toggle\""
  },
  "classList.remove": {
    "prefix": "clr",
    "body": "${1:document}.classList.remove('${2:class}');",
    "description": "Code snippet for \"classList.remove\""
  },
  "addEventListener": {
    "prefix": "ael",
    "body": "${1:document}.addEventListener('${2:load}', function (e) {\n\t${3:// body}});",
    "description": "Code snippet for \"addEventListener\""
  },
  "appendChild": {
    "prefix": "ac",
    "body": "${1:document}.appendChild(${2:element});",
    "description": "Code snippet for \"appendChild\""
  },
  "removeChild": {
    "prefix": "rc",
    "body": "${1:document}.removeChild(${2:element});",
    "description": "Code snippet for \"removeChild\""
  },
  "createElement": {
    "prefix": "cel",
    "body": "${1:document}.createElement(${2:element});",
    "description": "Code snippet for \"createElement\""
  },
  "createDocumentFragment": {
    "prefix": "cdf",
    "body": "${1:document}.createDocumentFragment();$2",
    "description": "Code snippet for \"createDocumentFragment\""
  },

  // adnanmugu
  "constant": {
    "prefix": "cnt",
    "body": "const ${1:name} = ${0:value};",
    "description": "Create Constant"
  },
  "letVariable": {
    "prefix": "lt",
    "body": "let ${1:name} = ${0:value};",
    "description": "Create let variable"
  },
  "shebang": {
    "prefix": "shebang",
    "body": "#! /usr/bin/env node",
    "description": "Create a shebang comment"
  }
}
